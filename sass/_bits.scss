$yellow : #FFF9A6;
$accent : rgb(130,160,255);
$lightgray : rgb(249,249,249);
$gray : darken($lightgray, 10);
$pdf : rgb(248,58,48);

@import url(http://fonts.googleapis.com/css?family=Droid+Serif:400,400italic|Open+Sans:400,300,700);
$bodyfont: open sans;
$displayfont: droid serif;

@font-face {
    font-family: 'entypo';
    src: url('fonts/entypo.eot');
    src: url('fonts/entypo.eot?#iefix') format('embedded-opentype'),
         url('fonts/entypo.woff') format('woff'),
         url('fonts/entypo.ttf') format('truetype'),
         url('fonts/entypo.svg#Entypo') format('svg');
    font-weight: normal;
    font-style: normal;

}

.nicetype {
    font:{
        family: $bodyfont;
    }
    line-height: 1.55em;
}

.shadow {
    box-shadow: 0.0em 0.1em 0.1em -0.08em rgba(190,190,190,0.5);
}

@mixin calc($property, $expression) { 
  #{$property}: -moz-calc(#{$expression}); 
  #{$property}: -o-calc(#{$expression}); 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: calc(#{$expression}); 
} 

@mixin breakpoint($point) {
  @if $point == xl {
    @media (min-width: 90em) { @content; }
  }
  @if $point == l {
    @media (min-width: 70em) { @content; }
  }
  @if $point == m {
    @media (min-width: 50em) { @content; }
  }
  @if $point == s {
    @media (min-width: 30em) { @content; }
  }
  @else if $point == sr {
    @media (max-width: 30em) { @content; }
  }
}

@mixin box($color, $padding: .7em){
	display: inline-block;
	cursor: pointer;
	background-color: $color;
	padding: $padding;
	color: white;
	border: none;
	&:hover, &:focus {
		background-color: darken($color, 5);
	}
}
@mixin speechbubble(){
	position: relative;
	&:before{
		position: absolute;
		content:"";
		display: block;
		height: 0;
		width: 0;
		top:-1.2em;
		left: 1em;
		border :{
			width:10px;
			top-color:transparent;
			right-color:transparent;
			bottom-color:white;
			left-color:transparent;
			style: solid;
		}
	}
}
@mixin transform {
	-moz-transform: translateY(-0.1em);
	-webkit-transform: translateY(-0.1em);
	-ms-transform: translateY(-0.1em);
	transform: translateY(-0.1em);
}
@mixin transition($duration: .3s, $property: all){
	-moz-transition: $duration $property;
	-o-transition: $duration $property;
	-webkit-transition: $duration $property;
	-ms-transition: $duration $property;
	transition: $duration $property;
}

@mixin cols($count, $gap: 0){
	-moz-column-count: $count;
	-o-column-count: $count;
	-webkit-column-count: $count;
	-ms-column-count: $count;
	column-count: $count;
	
	-moz-column-gap: $gap;
	-o-column-gap: $gap;
	-webkit-column-gap: $gap;
	-ms-column-gap: $gap;
	column-gap: $gap;

}

.iconfont {
	font-family: 'entypo';
	font-size: 2em;
}

@mixin metro($control) {
	@include transition(.3s, all);
	cursor: pointer;
	
	@if $control == 0 {
		&:hover {
			box-shadow: 0 0 0 .3em rgba(white, .5) inset;
		}
	}
	@if $control == 1 {
		&:hover {
			box-shadow: 0 0 0 .3em rgba(black, .1) inset;
		}
	}
}

$formats: 
  (pdf rgb(248,58,48))
  (xlsx rgb(40,235,30))
  (docx cornflowerblue)
  (eps rgb(240, 170, 40))
  (aep rgb(40, 40, 50))
  (dwt rgb(130, 230, 40))
  (avi rgb(20, 90, 250))
  (gif rgb(180, 20, 240))
  (pptx rgb(240, 220, 10))
;

@mixin moveX($x){
	//Firefox unprefixed since v 16.00
	-webkit-transform: translateX($x);
	-ms-transform: translateX($x); //IE9
	transform: translateX($x);
}

.clearfix:before,
.clearfix:after {
    content: "";
    display: table;
	clear: both;
} 
.clearfix:after {
    clear: both;
}
.clearfix {
    zoom: 1; /* For IE 6/7 (trigger hasLayout) */
}